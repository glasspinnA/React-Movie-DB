{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","fetchGenres","state","movieList","length","fetchMovieByGenre","stop","_callee2","_context2","fetch","then","res","json","result","setState","genreList","genres","isLoading","catch","error","alert","message","_ref3","_callee3","event","genreId","genreName","url","_context3","activePage","stopPropagation","results","totalResults","total_results","_x","_x2","_x3","apply","arguments","searchMovie","_ref4","_callee5","movie","movieQuery","_context5","target","value","timer","clearTimeout","setTimeout","_callee4","_context4","console","log","totalPages","total_pages","_x4","handlePageChange","_ref6","_callee6","pageNumber","urlPrefix","_context6","_x5","undefined","movieCategory","_this2","_this$state","react_default","createElement","className","type","placeholder","onChange","movieInput","material_icons_react_default","icon","invert","color","map","item","key","id","onClick","name","alt","src","poster_path","title","vote_average","Pagination_default","totalItemsCount","pageRangeDisplayed","itemsCountPerPage","innerClass","activeClass","itemClass","linkClass","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39ecf96a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MaterialIcon from 'material-icons-react';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      genreList: [],\r\n      movieList: [],\r\n      isLoading: true,\r\n      movieQuery: undefined,\r\n      movieCategory: undefined,\r\n      genreId: undefined,\r\n      genreName: undefined,\r\n      activePage: 1,\r\n      totalPages: undefined,\r\n      totalResults: 1,\r\n    }\r\n\r\n    this.timer = 0\r\n  }\r\n\r\n  componentDidMount = async() =>{\r\n    await this.fetchGenres()\r\n\r\n    if(this.state.movieList.length === 0){\r\n      this.fetchMovieByGenre(null,12,\"Action\")\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Function for fetch genres for movies\r\n   */\r\n  fetchGenres = async () => {\r\n    const url = 'https://api.themoviedb.org/3/genre/movie/list?api_key=d50ecfa4de79b35a1cc43cc6ddcd1373&language=en-US'\r\n    await fetch(url)\r\n    .then(res => res.json())\r\n    .then((result) => {      \r\n      this.setState({\r\n        genreList: result.genres,\r\n        isLoading: false,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      alert(error.message)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Function for fetch movie by given genre\r\n   */\r\n  fetchMovieByGenre = async (event, genreId, genreName) => {\r\n    this.setState({ activePage:1, movieList:[], genreName: genreName })\r\n    \r\n    try{\r\n      event.stopPropagation()\r\n    }catch(error){}\r\n\r\n    const url = \"https://api.themoviedb.org/3/discover/movie?api_key=d50ecfa4de79b35a1cc43cc6ddcd1373&language=en-US&with_genres=\" + genreId\r\n    await fetch(url)\r\n    .then(res => res.json())\r\n    .then((result) => {                  \r\n      this.setState({\r\n        movieList: result.results,\r\n        genreId: genreId,\r\n        isLoading:false,\r\n        totalResults: result.total_results,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      alert(error.message)\r\n    })    \r\n  }\r\n\r\n\r\n  /**\r\n   * Function for fetching movie after movie query\r\n   */\r\n  searchMovie = async (movie) => {\r\n    const movieQuery = movie.target.value\r\n    \r\n    if(this.timer){\r\n      clearTimeout(this.timer)\r\n    }\r\n\r\n    this.timer = setTimeout(async () =>{\r\n      if(movieQuery.length > 1){\r\n        const url = \"https://api.themoviedb.org/3/search/movie?api_key=d50ecfa4de79b35a1cc43cc6ddcd1373&query=\" + movieQuery\r\n        await fetch(url)\r\n          .then(res => res.json())          \r\n          .then((result) => {  \r\n            console.log(result);\r\n                                \r\n            this.setState({\r\n              movieList: result.results,\r\n              isLoading:false,\r\n              totalPages: result.total_pages,\r\n              totalResults: result.total_results\r\n            })\r\n          })\r\n          .catch((error) => {\r\n            alert(error.message)\r\n          })\r\n      }\r\n    },300)\r\n  }\r\n\r\n\r\n  /**\r\n   * Function to handle API call when the user changes page within the movie section\r\n   */\r\n  handlePageChange = async (pageNumber) => {\r\n    this.setState({ activePage: pageNumber });\r\n\r\n    const urlSuffix = \"https://api.themoviedb.org/3/discover/movie?api_key=d50ecfa4de79b35a1cc43cc6ddcd1373&language=en-US&with_genres=\"\r\n    const urlPrefix = this.state.genreId + \"&page=\" + pageNumber \r\n    const url = urlSuffix + urlPrefix\r\n\r\n    await fetch(url)\r\n    .then(res => res.json())\r\n    .then((result) => {            \r\n      this.setState({\r\n        movieList: result.results,\r\n        isLoading:false,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      alert(error.message)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {movieList,genreList, isLoading} = this.state\r\n    if(isLoading){\r\n      return(\r\n        <div>Loading</div>\r\n      )\r\n    }else{\r\n      return(\r\n      <div className=\"container\">\r\n        <div className=\"dashboard\">\r\n          <div className=\"search-bar\">\r\n            <div className=\"form\">\r\n              <input type=\"text\" placeholder=\"Search Movie\" \r\n              onChange={(movieInput) => this.searchMovie(movieInput)}\r\n              />\r\n              <span className=\"search-icon\">\r\n                <MaterialIcon icon=\"search\" invert color=\"#1a1399\"/>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"menu\">\r\n            <ul>\r\n              {genreList.map(item => (\r\n                <li key={item.id} onClick={(event) => {this.fetchMovieByGenre(event,item.id, item.name)}}>\r\n                  {item.name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"dashboard-content\">\r\n            <h1>You want to see {this.state.genreName} tonight</h1>\r\n            <div className=\"movie-container\">\r\n              {movieList.map(movie => (\r\n                <div className=\"dashboard-content-movie\" key={movie.id}>\r\n                    <img alt=\"No Poster Available\" src={'http://image.tmdb.org/t/p/w185/'+ movie.poster_path} />\r\n                    <br/>\r\n                    <p><strong>{movie.title}</strong></p>                    \r\n                    <p>{movie.vote_average} ⭐</p>                    \r\n                </div>\r\n              ))}\r\n            </div>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              totalItemsCount={this.state.totalResults}\r\n              pageRangeDisplayed={3}\r\n              itemsCountPerPage={20}\r\n              onChange={(item) => this.handlePageChange(item)}\r\n              innerClass=\"pagination\"\r\n              activeClass=\"activeClass\"\r\n              itemClass=\"itemClass\"\r\n              linkClass=\"linkClass\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}